[{"name": "app.py", "content": "import plotly.express as px\nfrom shiny import reactive\nfrom shiny.express import input, render, ui\nfrom shinywidgets import render_plotly\nfrom palmerpenguins import load_penguins\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\n# Load penguins dataset\npenguins_df = load_penguins()\n\n# Create hyperlink function\ndef create_hyperlink(text, href, target=\"_blank\"):\n    \"\"\"Generates an HTML hyperlink.\"\"\"\n    return f'<a href=\"{href}\" target=\"{target}\">{text}</a>'\n\n# Set up the UI page options\nui.page_opts(title=\"Elen's Palmer Penguin Dataset Exploration\", fillable=True)\n\n# Create the sidebar for user interaction\nwith ui.sidebar(open=\"open\"):\n    ui.h2(\"Sidebar\", style=\"font-size: 16px;\")\n\n    # Dropdown to select attribute\n    ui.tags.div(\n        ui.input_selectize(\n            \"selected_attribute\",\n            \"Select Attribute\",\n            [\"bill_length_mm\", \"flipper_length_mm\", \"body_mass_g\"],\n        ),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # Numeric input for Plotly histogram bins\n    ui.tags.div(\n        ui.input_numeric(\"plotly_bin_count\", \"Plotly Bin Count\", 30),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # Slider for Seaborn histogram bins\n    ui.tags.div(\n        ui.input_slider(\n            \"seaborn_bin_count\",\n            \"Seaborn Bin Count\",\n            1,\n            100,\n            30,\n        ),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # Checkbox group for selecting species\n    ui.tags.div(\n        ui.input_checkbox_group(\n            \"selected_species_list\",\n            \"Select Species\",\n            [\"Adelie\", \"Gentoo\", \"Chinstrap\"],\n            selected=[\"Adelie\"],\n            inline=True,\n        ),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # Checkbox group for selecting islands\n    ui.tags.div(\n        ui.input_checkbox_group(\n            \"selected_island_list\",\n            \"Select Island\",\n            [\"Torgersen\", \"Biscoe\", \"Dream\"],\n            selected=[\"Torgersen\"],\n            inline=True,\n        ),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # User feedback\n    ui.tags.div(\n        ui.input_text_area(\"user_feedback\", \"Leave your feedback (e.g., suggestions, questions):\", \"\"),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n    \n    # Submit button for feedback\n    ui.tags.div(\n        ui.input_action_button(\"submit_feedback\", \"Submit Feedback\"),\n        style=\"font-size: 12px; margin-bottom: 10px;\"\n    )\n\n    # Add the hyperlink to GitHub in the sidebar\n    ui.tags.div(\n        create_hyperlink(\"Visit Cintel-04 Local on GitHub\", href=\"https://github.com/Elen-tesfai/cintel-04-local\", target=\"_blank\"),\n        style=\"font-size: 14px; font-weight: bold; margin-top: 20px; color: #007bff;\"\n    )\n\n# Layout columns for organizing content\nwith ui.layout_columns():\n    # Data Table card\n    with ui.card():\n        ui.card_header(\"Data Table\")\n\n        @render.data_frame\n        async def penguin_datatable():\n            # Get filtered data\n            data = await filtered_data()\n            # Get the selected attribute from the input\n            selected_attribute = input.selected_attribute()\n            # Only show the selected attribute column along with species and island for better clarity\n            if selected_attribute in data.columns:\n                return data[['species', 'island', selected_attribute]]\n            else:\n                return data  # Fallback to show all data in case something goes wrong\n\n    # Data Grid card\n    with ui.card():\n        ui.card_header(\"Data Grid\")\n\n        @render.data_frame\n        async def penguin_datagrid():\n            # Get filtered data\n            data = await filtered_data()\n            # Get the selected attribute from the input\n            selected_attribute = input.selected_attribute()\n            # Only show the selected attribute column along with species and island\n            if selected_attribute in data.columns:\n                return data[['species', 'island', selected_attribute]]\n            else:\n                return data  # Fallback to show all data in case something goes wrong\n\n    # Summary Statistics card\n    with ui.card():\n        ui.card_header(\"Summary Statistics\")\n\n        @render.text\n        async def summary_statistics():\n            data = await filtered_data()\n            if data.empty:\n                return \"No data available.\"\n            summary = data.describe().to_string()\n            return f\"Summary Statistics:\\n{summary}\"\n\n# Add a reactive calculation to return filtered DataFrame\n@reactive.calc\nasync def filtered_data():\n    selected_species = input.selected_species_list()\n    selected_islands = input.selected_island_list()\n    filtered_df = penguins_df\n\n    if selected_species:\n        filtered_df = filtered_df[filtered_df['species'].isin(selected_species)]\n    \n    if selected_islands:\n        filtered_df = filtered_df[filtered_df['island'].isin(selected_islands)]\n\n    return filtered_df  # Return filtered DataFrame\n\n# Layout columns for visualizations\nwith ui.layout_columns():\n    # Tabbed tabset card for plots\n    with ui.navset_card_tab(id=\"plot_tabs\"):\n        # Plotly Histogram tab\n        with ui.nav_panel(\"Plotly Histogram\"):\n\n            @render_plotly\n            async def plotly_histogram():\n                try:\n                    data = await filtered_data()  # Get the current data\n                    if data.empty:\n                        return \"No data available for the selected filters.\"\n                    plot_title = f\"{input.selected_attribute().capitalize()} Distribution by Species\"\n                    plotly_hist = px.histogram(\n                        data_frame=data,\n                        x=input.selected_attribute(),\n                        nbins=input.plotly_bin_count(),\n                        color=\"species\",\n                        color_discrete_sequence=[\"#5e4b8a\", \"#a55e8b\", \"#d59b84\"],\n                    ).update_layout(\n                        title=plot_title,\n                        xaxis_title=input.selected_attribute().capitalize(),\n                        yaxis_title=\"Count\",\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return plotly_hist\n                except Exception as e:\n                    print(\"Error generating Plotly histogram:\", e)\n                    return None\n\n        # Seaborn Histogram tab\n        with ui.nav_panel(\"Seaborn Histogram\"):\n\n            @render.plot\n            async def seaborn_histogram():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return \"No data available for the selected filters.\"\n                    plt.figure(facecolor='#ffebee')\n                    seaborn_hist = sns.histplot(\n                        data=data,\n                        x=input.selected_attribute(),\n                        bins=input.seaborn_bin_count(),\n                        color=\"#5e4b8a\",\n                    )\n                    seaborn_hist.set_title(f\"{input.selected_attribute().capitalize()} Distribution by Species\")\n                    seaborn_hist.set_xlabel(input.selected_attribute().capitalize())\n                    seaborn_hist.set_ylabel(\"Count\")\n                    plt.gca().set_facecolor('#ffebee')\n                    plt.tight_layout()\n                    return seaborn_hist\n                except Exception as e:\n                    print(\"Error generating Seaborn histogram:\", e)\n                    return None\n\n        # Plotly Scatterplot tab\n        with ui.nav_panel(\"Plotly Scatterplot\"):\n\n            @render_plotly\n            async def plotly_scatterplot():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return \"No data available for the selected filters.\"\n                    plotly_scatter = px.scatter(\n                        data_frame=data,\n                        x=\"bill_length_mm\",\n                        y=\"bill_depth_mm\",\n                        color=\"species\",\n                        size_max=8,\n                        title=\"Plotly Scatterplot: Bill Depth and Length\",\n                        labels={ \n                            \"bill_depth_mm\": \"Bill Depth (mm)\",\n                            \"bill_length_mm\": \"Bill Length (mm)\",\n                        },\n                        color_discrete_sequence=[\"#5e4b8a\", \"#a55e8b\", \"#d59b84\"],\n                    ).update_layout(\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return plotly_scatter\n                except Exception as e:\n                    print(\"Error generating Plotly scatterplot:\", e)\n                    return None\n\n        # Box Plot tab\n        with ui.nav_panel(\"Box Plot\"):\n\n            @render_plotly\n            async def box_plot():\n                try:\n                    data = await filtered_data()\n                    if data.empty:\n                        return \"No data available for the selected filters.\"\n                    box_fig = px.box(\n                        data_frame=data,\n                        x=\"species\",\n                        y=\"bill_length_mm\",\n                        title=\"Box Plot of Bill Length by Species\",\n                        labels={\"bill_length_mm\": \"Bill Length (mm)\"},\n                    ).update_layout(\n                        plot_bgcolor='#ffebee',\n                        paper_bgcolor='#ffebee',\n                    )\n                    return box_fig\n                except Exception as e:\n                    print(\"Error generating box plot:\", e)\n                    return None\n\n# Reactive to handle feedback submission\n@reactive.event(input.submit_feedback)\nasync def handle_feedback():\n    feedback = input.user_feedback()\n    if feedback.strip():  # Ensure feedback isn't empty\n        print(f\"Feedback received: {feedback}\")\n        ui.output_text(\"Thank you for your feedback!\")\n    else:\n        ui.output_text(\"Please provide feedback before submitting.\")", "type": "text"}]